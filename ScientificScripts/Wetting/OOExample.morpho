//surfaces.morpho
import functionals
import meshtools
import optimize
import plot

class Surface {
    /* This class defines the common functionality of a surface 
     * to make a new surface one only needs to provide:
     * * the properity .name
     * * a getEnergy method that returns a metric for how far a point is from the surface
     * * a getGradE method that provides the gradient of that metric
     */
    getPinningFunctional(){
        return ScalarPotential(self.getEnergy,self.getGradE)
    }
    getTitle() { return "${self.name}"}
}
class PlanarSurface is Surface{
    /* This class defines a plane by a normal vector and a point 
     * By default it creats a plane at <0,0,-0.5> in the x-y direction*/

    init(n = nil, point = nil) {
        // if we aren't provided a normal set it equal to <0,0,1>
        if (isnil(n)) self.normal = Matrix([0,0,1]) 
        // otherwise use the normal provided
        else self.normal = n

        // if no point is provided set it to <0,0,-0.5>
        if (isnil(point)) self.point = Matrix([0,0,-0.5])
        // otherwise use the point provided
        else self.point = point
        
        // the name of the surface is only ever Plane
        self.name = "Plane" 
    }
    // The energy is how far we are in from the point but only in the direction of the normal.
    getEnergy(x,y,z) {return self.normal.inner(Matrix([x,y,z])-self.point)}
    // The gradient is just the surface normal
    getGradE(x,y,z) {return self.normal}

}

class CylindricalSurface is Surface {
    // This class defines a Cylinder that extends infinitly in the x-direction by its radius and center
    init(r, center){
        // To inialize the cylinder you provide it a radius and a center = Matrix([x,y,z])
        self.r = r
        self.center = center
        // Its name is Cylinder and then its radius
        self.name = "Cylinder r = ${self.r}"
    }
    // This is the distance squared from a point to the cylinder
    getEnergy(x,y,z) { return y^2+(z-self.center[2])^2-self.r^2}

    // This is the gradient of the distance squared
    getGradE(x,y,z) { return Matrix([0,2*y,2*(z-self.center[2])])}

    


}



class SphericalSurface is Surface {
    // This class defines a sphere by it radius and center = Matrix([x,y,z])
    init(r,center){
        self.r = r
        self.center = center
        // Its name is Sphere and its radius
        self.name = "Sphere r = ${self.r}"
    }
    // This is the distance squared from a point to the sphere
    getEnergy(x,y,z) { return (x-self.center[0])^2+(y-self.center[1])^2 +(z-self.center[2])^2-self.r^2 }
    // This is the gradient of the distance squared
    getGradE(x,y,z) { return Matrix([2*(x-self.center[0]),2*(y-self.center[1]),2*(z-self.center[2])])}

}

class MeshLibrary{
    // This class contains a mesh constructors
    // Right now it provides cube, plane, cylinder and sphere
    // TODO: add the rest
    cube(length, center) {
        var cube = PolyhedronMesh(
            [[-0.5,-0.5,-0.5],
            [-0.5,0.5,-0.5],
            [0.5,-0.5,-0.5],
            [0.5,0.5,-0.5],
            [-0.5,-0.5,0.5],
            [-0.5,0.5,0.5],
            [0.5,-0.5,0.5],
            [0.5,0.5,0.5]],
            [
            [0,1,3,2],
            [0,1,5,4],
            [2,3,7,6],
            [1,3,7,5],
            [0,2,6,4],
            [4,5,7,6]])
        cube.addgrade(1)
        cube.addgrade(2)
        return cube
    }
}
class Minimizer {
    /* This class provides a interface to the minimization routines by the optimizer as well as 
     * mesh refinemnt. It assumes that its passed an experiment which responds to 
     * * getOpt() to return the shape optimizer
     * * getRegualrizer() to return the regularization optimizer
     * * getMesh to return a list of meshes in the problem to refine
     * * getSelction to return a list of selctions in the problem to refine 
     * * show() to create intermidtate plots of the minimzation
     * * updateFromRefmap(refmap) to update an experiment from a mesh refinement step
     *
     * The minimizer is called with a minimzation procedure which is a list of minimzation operations
     * like ["relax",n], ["linesearch",n] ["gradientDesent",n] where n is the number of steps to call the minimzation method with
     * additionaly ["regularize",n] will run n steps of the regularizer
     * ["refine"] will perform a mesh refiment */

    init(experiment){
        // The minimizer is constucted with an experiment
        self.experiment = experiment
    }
    // The go method runs a procedure as described above 
    go(procedure) {
        // Iterate thought each step in the procedure
        for (step in procedure){
            // Perform a relaxation
            if (step[0]=="relax") {
                    print "relaxing ${step[1]}" 
                    // n times
                    self.experiment.getOpt().relax(step[1])
            } else if (step[0]=="refine") {
                    // Refine the mesh
                    print("refining")
                    self.refine()
            } else if (step[0] == "regularize") {
                    // Regularize the mesh
                    print("regularizing")
                    self.experiment.getRegualrizer().relax(step[1])
                    equiangulate(self.experiment.getMesh())
            } else if (step[0] = "conjugategradient") {
                print "conjugategradient ${step[1]}" 
                self.experiment.getOpt().conjugategradient(step[1])
            } else if (step[0] = "linesearch") {
                print "linesearch ${step[1]}" 
                self.experiment.getOpt().linesearch(step[1])
            }
        }
    }
    refine(){
        var mr=MeshRefiner([self.experiment.getMesh(), self.experiment.getSelections()])
        var refmap=mr.refine()
        self.experiment.updateFromRefmap(refmap)
    }

}


class DropletModel {
    /* This class minimizes the surface area of a droplet in contact with a surface */
    init(sigma, deltaSigma, surface) {
        //asign constuctor values
        self.sigma = sigma // air water interface
        self.deltaSigma = deltaSigma // surface water interface
        self.surface = surface
        
        // grab a mesh from the mesh library
        self.mesh = MeshLibrary.cube(1,Matrix([0,0,0])) // makes a cube with side length one cenered at 0,0,0
        // create a minimzation procedure        
        self.minimizationProcedure = [["relax",10000],["refine"],["relax",10000],["regularize",100],["refine"],["relax",10000],["regularize",100],["relax",1000]]

    }
    createSelection() {
        //select the part of the mesh in contact with the surface
        var sel = Selection(self.mesh,fn(x,y,z) abs(self.surface.getEnergy(x,y,z))<self.bottomTolerence)
        sel.addgrade(1)
        sel.addgrade(2)
        return sel

    }
    setupProblem(){
        // create an optimization probelm
        self.problem = OptimizationProblem(self.mesh)
        self.bottomTolerence = 5e-1
        // To start the problem we select the bottom of the cube
        self.bottomBound = Selection(self.mesh,fn (x,y,z) abs(z+0.5)<1e-2)
        self.bottomBound.addgrade(1)
        self.bottomBound.addgrade(2)
        //Air water interface
        self.problem.addenergy(Area(),prefactor = self.sigma)
        //Water Surface Interface
        self.problem.addenergy(Area(),selection = self.bottomBound,prefactor = (self.deltaSigma-self.sigma))
        //pin the boundry to the surface
        self.problem.addlocalconstraint(self.surface.getPinningFunctional(),selection = self.bottomBound)
        //volume constraint
        self.problem.addconstraint(VolumeEnclosed())
        //create the shape optizmizer
        self.opt = ShapeOptimizer(self.problem,self.mesh)
        self.opt.stepsize = 1e-3
        self.opt.quiet = true

        // create a regularization probelm to keep the faces regular
        self.regproblem = OptimizationProblem(self.mesh)
        self.regproblem.addenergy(EquiElement())
        // the points at the surface should still be there
        self.regproblem.addlocalconstraint(self.surface.getPinningFunctional(),selection = self.bottomBound)
        // don't change the area while reagularizing
        self.regproblem.addconstraint(Area(),selection = self.bottomBound)
        // don't change the volume while reguarlizing
        self.regproblem.addconstraint(VolumeEnclosed())
        self.ropt = ShapeOptimizer(self.regproblem,self.mesh)
        self.ropt.stepsize = 1e-4
        self.ropt.quiet = true

    }
    minimize(){
        // Minimize the energy
        // first create a minimizer initalized with this model
        self.myMinimizer = Minimizer(self)
        // then tell it to minimize with this model's procedure
        self.myMinimizer.go(self.minimizationProcedure)
    }
    getMesh(){
        // returns the mesh of the probelm
        return self.mesh
    }
    getSelections() {
        // returns the selections for the problem
        return self.bottomBound
    }
    updateFromRefmap(refmap) {
        // given a refinemnet map this update the mesh and selection as well as the tolerances
        self.bottomTolerence = self.bottomTolerence/2
        self.mesh = refmap[self.mesh]
        var newbnd=self.createSelection()
        refmap[self.bottomBound]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [self.problem, self.opt]) el.update(refmap) // Update the problem
        for (el in [self.regproblem, self.ropt]) el.update(refmap) // Update the problem
        self.bottomBound = refmap[self.bottomBound]
    }
    getOpt(){
        // get the optimizer
        return self.opt
    }
    getRegualrizer(){
        // get the regularizer
        return self.ropt
    }
    show(title=nil, highlightBound=true, bound=nil, returning=false) {
        // show the model
        var graphic
        // if high light bound is true, we highlight the bottom bound by default. highl light specified other wise
        if (highlightBound) {
            if (!bound) {bound = self.getSelections()}
            graphic = plotselection(self.getMesh(), bound, grade=[0,1,2])
        }
        else {
            graphic = plotmesh(self.getMesh(), grade=[0,1,2])
        }
        // if no custom title is passed in we show all the param as title
        if (!title) {
            graphic.title = self.getTitle()
                    }
        else { 
            graphic.title = title
        }
        // show the graphic or return
        // graph += self.surface.show()
        if (returning)
            return graphic
        Show(graphic)
    }
    getTitle() {
        // produce a title for this model
        return "sigma=${self.sigma}; deltaSigma=${self.deltaSigma};" + self.surface.getTitle()
    }


}


class ExperimentManager {
    // This class runs an experment on a model
    exp1() {
        // minimize a droplet on a planr surface
        var myDroplet = DropletModel(1,0.5,PlanarSurface())
        myDroplet.setupProblem()
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)
    }
    exp2() {
        // minimize a droplet on a cylindrical surface
        var r = 1
        var myDroplet = DropletModel(1,0.5,CylindricalSurface(r,Matrix([0,0,-0.5-r])))
        myDroplet.setupProblem()
        myDroplet.minimizationProcedure = [["relax",1000],["refine"],["relax",1000],["regularize",100],["relax",100],["refine"],["relax",1000],["regularize",100],["relax",1000]]
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)
    }
    exp3() {
        // minimze a droplet on a sphere
        var r = 1
        var myDroplet = DropletModel(1,0.1,SphericalSurface(r,Matrix([0,0,-r-0.5])))
        myDroplet.setupProblem()
        myDroplet.minimizationProcedure = [["relax",1000],["refine"],["relax",1000],["regularize",100],["relax",100],["refine"],["relax",1000],["regularize",100],["relax",1000]]
        myDroplet.minimize()
        myDroplet.show(highlightBound = true)

    }

}

var myExp = ExperimentManager()
myExp.exp1()
myExp.exp2()
myExp.exp3()