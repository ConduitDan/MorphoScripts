import meshtools
import plot
import optimize
import constants

class wettingProblem

fn makeCube() {
    var m = PolyhedronMesh(
        [[-0.5,-0.5,0],
        [-0.5,0.5,0],
        [0.5,-0.5,0],
        [0.5,0.5,0],
        [-0.5,-0.5,1],
        [-0.5,0.5,1],
        [0.5,-0.5,1],
        [0.5,0.5,1]],
        [[0,1,5,4],
        [2,3,7,6],
        [1,3,7,5],
        [0,2,6,4],
        [4,5,7,6]])
        cube.addgrade(1)

     return cube
}
fn MakeWettingProbelm(cube,sigma = 3, rho = 0, g = 9.8, deltaSigma = -1){
    // var sigma = 3 // surface tension
    // var rho = 0 // density
    // //experiment rho ~1.5 g/cm3 xxxx just use water
    // // droplet volume 10 uL
    // var g = 9.8 // gravity
    // var deltaSigma = -1// adhesion

    var problem = OptimizationProblem(cube)
    var regproblem = OptimizationProblem(cube) // the reguerlization
    var leq=EquiElement()
    regproblem.addenergy(leq)

    var la=Area()
    //var la=AreaIntegral(fn(x) 1)
    problem.addenergy(la, prefactor=sigma)

    //var laa=AreaIntegral(fn (x) (x[2]^2)/2)
    var laa=AreaIntegral(fn (x) abs(Matrix([0,0,1]).inner(normal())) * (x[2]^2)/2)
    problem.addenergy(laa, prefactor=rho*g)
    var laaa = AreaEnclosed()
    // this is the bottom boundary
    var bnd=Selection(cube, boundary=true)

    problem.addenergy(laaa, selection=bnd, prefactor=-1*deltaSigma)

    //

    // volume constraint

    var lv = VolumeEnclosed()

    problem.addconstraint(VolumeEnclosed())
    regproblem.addconstraint(lv)
    //

    fn dist(x,y,z) { return z }
    fn grad(x,y,z) { return Matrix([0, 0, 1]) }
    var ldist = ScalarPotential(dist, grad)
    problem.addlocalconstraint(ldist, selection=bnd)

    // for (en in problem.energies) print en.selection

    // print problem.energies.count()

    var opt = ShapeOptimizer(problem, cube)
    opt.stepsize = 0.001
    var ropt = ShapeOptimizer(regproblem,cube)
    ropt.fix(bnd)

    return [problem,opt,regproblem,ropt]
}

fn minimizeWettingProblem(optlist){
    var problem = optlist[0]
    var opt = optlist[1]
    var regproblem = optlist[2]
    var ropt = optlist[3]

    var itermax = 4
    var refmax = 3
    for (refiter in 1..itermax) {

        print "===Refinement level ${refiter}==="
        print "-Regularize"
        ropt.stepsize=0.001
        ropt.steplimit=0.001
        ropt.linesearch(10)
        equiangulate(cube)

        opt.relax(20)
        opt.conjugategradient(300)


        //opt.conjugategradient(100) these throw errors

        //opt.linesearch(100) these throw errors

        if (refiter==refmax) break

        // Refinement
        
        var mr=MeshRefiner([cube, bnd])
        // Set the refiner up
        // args: mesh, field, selection
        
        var refmap=mr.refine()
        // Perform the refinement

        var newbnd=Selection(refmap[cube], boundary=true)
        refmap[bnd]=newbnd

        // Tell any other objects that refer to the mesh, fields or selections to update their references using refmap
        for (el in [problem, opt]) el.update(refmap) // Update the problem
        for (el in [regproblem, ropt]) el.update(refmap) // Update the problem

        // Update our own references
        cube=refmap[cube]; bnd=refmap[bnd] // Update variables

        // Show(plotselection(cube, bnd, grade=[0,1,2]))

    }
    show(title=nil, highlightBound=false, bound=nil, returning=false) {
        var graphic
        // if high light bound is true, we highlight the bottom bound by default. highl light specified other wise
        if (highlightBound) {
            if (!bound) {bound = self.bottom_bound}
            graphic = plotselection(self.cube, bound, grade=[0,1,2])
        }
        else {
            graphic = plotmesh(self.cube, grade=[0,1,2])
        }
        // if no custom title is passed in we show all the param as title
        if (!title) {
            graphic.title = "sigma=${self.sigma}; rho=${self.rho}; g=${self.g}; deltaSigma=${self.deltaSigma}; r=${self.r}"
        }
        else { 
            graphic.title = title
        }
        // show the graphic or return
        if (returning)
            return graphic
        Show(graphic)
    }

}


fn cross(a, b) {
    return Matrix([ a[1]*b[2]-a[2]*b[1],
                    a[2]*b[0]-a[0]*b[2],
                    a[0]*b[1]-a[1]*b[0] ])
}
fn findContactangle(m,bnd) {
    // contact angle calculation
    // get the lines on the boundary
    var bndlines = bnd.idlistforgrade(1)
    var lineToFace = cube.connectivitymatrix(2,1)
    var faceToVertex = cube.connectivitymatrix(0,2)
    var contactangle = 0

    for (line in bndlines) { // for each line in the boundary
        var face = lineToFace.rowindices(line) // find the face it is attached to
        if (face.count()>1) {
            // throw(Error("NotBndLine","This line is connected to more than one face, its not on the boundary"))
        print "bad line, not on bnd"
        }
        var vertexNum = faceToVertex.rowindices(face[0]) // find the vertices on that face
        var r0 = cube.vertexposition(vertexNum[0])
        var r1 = cube.vertexposition(vertexNum[1])
        var r2 = cube.vertexposition(vertexNum[2])
        //surface unit Normal
        // var N = cross(r1-r0,r2-r1) // calculate the unit normal of the face
        // N /=N.norm()


        var boundrypts = [] // find the two points on the z = 0 plane
        var notboundrypt
        if (abs(r0[2])<1e-4) boundrypts.append(r0) else notboundrypt = r0
        if (abs(r1[2])<1e-4) boundrypts.append(r1) else notboundrypt = r1
        if (abs(r2[2])<1e-4) boundrypts.append(r2) else notboundrypt = r2
        var midpt = (boundrypts[0]+boundrypts[1])/2


        // var tangent = boundrypts[0]-boundrypts[1] // this line is on z=0 plane
        // var contactVector = cross(N,tangent) // normal cross the z=0 line give us a vector away from the z=0 plane that is on the face
        var contactVector = notboundrypt-midpt;

        contactangle += Pi-arccos(midpt.inner(contactVector)/(midpt.norm()*contactVector.norm()))
        // contactangle+=arctan(sqrt(contactVector[0]^2+contactVector[1]^2),contactVector[2])/bndlines.count()

    }
    return contactangle/Pi*180
}

//Show(plotselection(cube, ground, grade=[0,1,2]))
//var graph = plotselection(cube, bnd, grade=[0,1,2])
// var pp = PrettyPrinter(mesh = cube, selection = bnd, grade = [0,1,2])
// pp.animate("droplet.mp4")
//graph.title ="sigma=${sigma}, rho=${rho}, g=${g}, deltaSigma=${deltaSigma}"
//Show(graph)
